{* Fetch the page structure *}
{[ let rootGroup = [] /]}
{[ let page = context.page /]}
{[ let configuration = exportConfiguration() /]}
{[ let isRootForTab = false /]}
{[ let hasFirstLevelFlat = configuration.navigationFirstLevelExpanded /]}
{[ let showSectionLabel = configuration.navigationShowSectionLabel /]}
{[ let shouldShowTabbar = ds.documentationConfiguration().settings.tabbedNavigation /]}
{[ let documentationRoot = ds.rootDocumentationGroup() /]}

{[ if context.groupId ]}
    {* If we pass id of a group, we can request it directly *}
    {[ rootGroup = ds.documentationGroupById(context.groupId) /]}
{[ elseif !shouldShowTabbar ]}
    {* If we are not showing tabbar at the top, then we want to generate from true root, and show all categories *}
    {[ rootGroup = documentationRoot /]}
    {[ isRootForTab = true /]}
{[ else ]}
    {* If we pass page object, it means we are generating from root. However, our root is actually not the main root, but rather one object below it - and we want to show its name as header of the category as well as all its children *}
    {[ rootGroup = firstSubgroupOfPage(page) /]}
    {[ isRootForTab = true /]}
{[/]}

{[ if rootGroup ]}
    {* If we pass page object, it means we are generating from root. However, our root is actually not the main root, but rather one object below it - and we want to show its name as header of the category as well as all its children *}

    {[ if (isRootForTab && configuration.topNavHideCompletely) ]}
        <div class="site-logo-wrapper">
            {[ inject "component_site_logo" context page /]}

            <button class="btn-search search expanded">
                <div class="icon">{[ inject "icon_search" context configuration /]}</div>
                <div class="label">Search</div>
            </button>
        </div>
    {[/]}
    {[ if (isRootForTab && showSectionLabel) ]}
        <div class="nav-name">
            <span class="typographyDocsViewLabelCaps">{{ htmlSafeString(rootGroup.title) }}</span>
        </div>
    {[/]}
    <ul class="nav{{ !shouldShowTabbar ? " with-root-level" : ""}}{{ hasFirstLevelFlat ? " first-level-flat" : ""}}">
        {[ for item in rootGroup.children ]}
            {* Only show items that are exportable *}
            {[ if isExportable(item) ]}
                {[ let isActive = pageOrGroupActiveInContext(page, item) /]}
                {[ let activeClass = (isActive === true ? " active" : "") /]}
                {[ let isTab = (item.parent.groupBehavior === "Tabs" ? true : false) /]}
                {[ let itemId = item.id /]}
                {[ let itemTitle = resolveMenuLabel(item, documentationRoot, configuration.navigationOverrideHomepageLabel) /]}
                {[ let isGroupOpen = (isRootForTab && hasFirstLevelFlat && (item.groupBehavior !== "Tabs")) /]}
                
                {[ if item.type.equals("Page") ]}
                    <li class="nav-item{{ isTab === true ? " is-tab" : "" }}"><a class="nav-link{{ activeClass }}" href="{{ pageUrl(item, ds.documentationDomain()) }}">{{ itemTitle }}</a></li>
                {[ else ]}
                    <li class="nav-item{{ (isGroupOpen ? " group-open"  : "") }}">
                    {[ let firstDescendingPage = firstPageFromTop(item) /]}
                    {* Group will either link to the first page, or be fully disabled *}
                    {[ if firstDescendingPage ]}
                        <a class="nav-link group {{ activeClass }}" href="{{ pageUrl(firstDescendingPage, ds.documentationDomain()) }}">
                            {{ itemTitle }}
                            <span class="icon">{[ inject "icon_chevron_right" context configuration /]}</span>
                        </a>
                    {[ else ]}  
                        <a class="nav-link group {{ activeClass }}">{{ itemTitle }}</a>
                    {[/]}
                    {[ if (isGroupOpen || isActive) ]}
                        {[ let data = { "page": page, "groupId": itemId } /]}
                        {[ inject "page_body_structure_sidebar" context data /]}
                    {[/]}
                    </li>
                {[/]}
            {[/]}
        {[/]}
    </ul>
{[ else ]}
    {[ if (isRootForTab && showSectionLabel) ]} 
        <div class="nav-name">
            <span class="typographyDocsViewLabelCaps">{{ htmlSafeString(context.page.title.uppercased()) }}</span>
        </div>
    {[/]}
{[/]}
{[ if (isRootForTab && configuration.showSupernovaBranding) ]} 
    
{[/]}
